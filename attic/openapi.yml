swagger: '2.0'

info:
  title: Datapunt OpenID Connect service
  termsOfService: TODO
  contact:
    name: Datapunt Amsterdam
    url: https://datapunt.amsterdam.nl/
    email: datapunt.ois@amsterdam.nl
  # license:
  #   name: Datapunt Public License
  #   url: https://datapunt.amsterdam.nl/license
  version: '1.0.0'

host: api.data.amsterdam.nl

basePath: /oauth2

schemes:
  - https


parameters:

  code_formData:
    name: code
    in: formData
    description: |
      The authorization code received from the authorization server.
    required: true
    type: string

  client_id_formData:
    name: client_id
    in: formData
    required: false
    type: string
    description: |
      REQUIRED, if the client is not authenticating with the
      authorization server.

  client_id_query:
    name: client_id
    in: query
    required: true
    type: string
    description: |
      [2.2.  Client Identifier](https://tools.ietf.org/html/rfc6749#section-2.2)

      The authorization server issues the registered client a client
      identifier — a unique string representing the registration
      information provided by the client.

  grant_type_formData:
    name: grant_type
    in: formData
    description: |
      Must be `authorization_code`
    required: true
    type: string
    enum:
      - authorization_code

  redirect_uri_formData:
    name: redirect_uri
    in: formData
    required: false
    type: string
    format: uri
    description: |
      REQUIRED, if the `redirect_uri` parameter was included in the
      authorization request, and their values MUST be identical.

  redirect_uri_query:
    name: redirect_uri
    in: query
    required: false
    type: string
    format: uri
    description: |
      [3.1.2.  Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2)

      After completing its interaction with the resource owner, the
      authorization server […] redirects the user-agent to the
      client's redirection endpoint previously established with the
      authorization server during the client registration process or when
      making the authorization request.

  response_type_query:
    name: response_type
    in: query
    required: true
    description: "Must be `code`"
    type: string
    enum:
      - code

  scope_query:
    name: scope
    in: query
    required: false
    type: string
    pattern: '^[\x21\x23-\x5a\x5e-\x7e\[\]]+(?: [\x21\x23-\x5a\x5e-\x7e\[\]]+)*$'
    description: |
      [3.3.  Access Token Scope](https://tools.ietf.org/html/rfc6749#section-3.3)

      The authorization and token endpoints allow the client to specify the
      scope of the access request using the `scope` request parameter.  In
      turn, the authorization server uses the `scope` response parameter to
      inform the client of the scope of the access token issued.

      The value of the scope parameter is expressed as a list of space-
      delimited, case-sensitive strings.

  state_query:
    name: state
    in: query
    required: false
    type: string
    description: |
      RECOMMENDED.  An opaque value used by the client to maintain
      state between the request and callback.  The authorization
      server includes this value when redirecting the user-agent back
      to the client.  The parameter SHOULD be used for preventing
      cross-site request forgery as described in
      [Section 10.12.](https://tools.ietf.org/html/rfc6749#section-10.12)

securityDefinitions: {}

#   OAuth2:
#     type: oauth2
#     scopes:
#       someScope: "TODO: real scopes"
#     description: |
#       OAuth2 autorisatie op basis van authenticatie bij Toegangsmakelaar Amsterdam (TMA).
#     flow: accessCode
#     authorizationUrl: 'https://api.data.amsterdam.nl/oauth2/authz'
#     tokenUrl: 'https://api.data.amsterdam.nl/oauth2/token'


definitions: {}


responses:


  access_token_success:
    description: |
      [5.1.  Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1)

      The authorization server issues an access token and optional refresh
      token, and constructs the response by adding the following parameters
      to the entity-body of the HTTP response with a `200` (OK) status code.

      The parameters are included in the entity-body of the HTTP response
      using the `application/json` media type as defined by [RFC4627].  The
      parameters are serialized into a JavaScript Object Notation (JSON)
      structure by adding each parameter at the highest structure level.
      Parameter names and string values are included as JSON strings.
      Numerical values are included as JSON numbers.  The order of
      parameters does not matter and can vary.

      The authorization server MUST include the HTTP `Cache-Control`
      response header field [RFC2616] with a value of `no-store` in any
      response containing tokens, credentials, or other sensitive
      information, as well as the `Pragma` response header field [RFC2616]
      with a value of `no-cache`.

      The client MUST ignore unrecognized value names in the response.  The
      sizes of tokens and other values received from the authorization
      server are left undefined.  The client should avoid making
      assumptions about value sizes.  The authorization server SHOULD
      document the size of any value it issues.
    headers:
      Cache-Control:
        description: |
          See section [5.4. Pragma](https://tools.ietf.org/html/rfc7234#section-5.4)
          in RFC7234.
        type: string
        enum:
          - "no-store"
      Pragma:
        description: |
          See section [5.2. Cache-Control](https://tools.ietf.org/html/rfc7234#section-5.2)
          in RFC7234.
        type: string
        enum:
          - "no-cache"
    schema:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          format: base64
          description: |
            An opaque token string.
        token_type:
          type: string
          description: |
            In this version of the API, this will always be `Bearer`.
            Case insensitive.
          enum:
            - Bearer
        expires_in:
          type: integer
          format: int64
          description: |
            The lifetime in seconds of the access token.  For
            example, the value "3600" denotes that the access token will
            expire in one hour from the time the response was generated.
            If omitted, the authorization server SHOULD provide the
            expiration time via other means or document the default value.
        refresh_token:
          type: string
          format: base64
          description: |
            An opaque token string.
        scope:
          type: string
          pattern: '^[\x21\x23-\x5a\x5e-\x7e\[\]]+(?: [\x21\x23-\x5a\x5e-\x7e\[\]]+)*$'
          description: |
            OPTIONAL, if identical to the scope requested by the client;
            otherwise, REQUIRED.  The scope of the access token as
            described by [Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3).


  access_token_error:
    description: |
      [5.2.  Error Response](https://tools.ietf.org/html/rfc6749#section-5.2)

      The authorization server responds with an HTTP 400 (Bad Request)
      status code (unless specified otherwise)

      The parameters are included in the entity-body of the HTTP response
      using the `application/json` media type as defined by [RFC4627].  The
      parameters are serialized into a JSON structure by adding each
      parameter at the highest structure level.  Parameter names and string
      values are included as JSON strings.  Numerical values are included
      as JSON numbers.  The order of parameters does not matter and can
      vary.
    schema:
      type: object
      properties:
        error:
          description: |
            REQUIRED.  A single ASCII error code from the following:

            -   invalid_request

                The request is missing a required parameter, includes an
                unsupported parameter value (other than grant type),
                repeats a parameter, includes multiple credentials,
                utilizes more than one mechanism for authenticating the
                client, or is otherwise malformed.

            -   invalid_client

                Client authentication failed (e.g., unknown client, no
                client authentication included, or unsupported
                authentication method).  The authorization server MAY
                return an HTTP 401 (Unauthorized) status code to indicate
                which HTTP authentication schemes are supported.  If the
                client attempted to authenticate via the "Authorization"
                request header field, the authorization server MUST
                respond with an HTTP 401 (Unauthorized) status code and
                include the "WWW-Authenticate" response header field
                matching the authentication scheme used by the client.

            -   invalid_grant

                The provided authorization grant (e.g., authorization
                code, resource owner credentials) or refresh token is
                invalid, expired, revoked, does not match the redirection
                URI used in the authorization request, or was issued to
                another client.

            -   unauthorized_client

                The authenticated client is not authorized to use this
                authorization grant type.

            -   unsupported_grant_type

                The authorization grant type is not supported by the
                authorization server.

            -   invalid_scope

                The requested scope is invalid, unknown, malformed, or
                exceeds the scope granted by the resource owner.
          type: string
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
        error_description:
          type: string
          description: |
            OPTIONAL.  Human-readable ASCII text providing
            additional information, used to assist the client developer in
            understanding the error that occurred.
            Values for the "error_description" parameter MUST NOT include
            characters outside the set %x20-21 / %x23-5B / %x5D-7E.
        error_uri:
          type: string
          format: uri
          description: |
            OPTIONAL.  A URI identifying a human-readable web page with
            information about the error, used to provide the client
            developer with additional information about the error.
            Values for the `error_uri` parameter MUST conform to the
            URI-reference syntax and thus MUST NOT include characters
            outside the set `%x21 / %x23-5B / %x5D-7E`.



paths:


  /authorization_code_grant:
    get:
      summary: Authorization Code Grant endpoint
      description: |
        [4.1.1.  Authorization Request](https://tools.ietf.org/html/rfc6749#section-4.1.1)

        The client constructs the request URI by adding the following
        parameters to the query component of the authorization endpoint URI
        using the `application/x-www-form-urlencoded` format [...]

      parameters:
        - $ref: '#/parameters/response_type_query'
        - $ref: '#/parameters/client_id_query'
        - $ref: '#/parameters/redirect_uri_query'
        - $ref: '#/parameters/scope_query'
        - $ref: '#/parameters/state_query'

      responses:

        default:
          description: |
            TODO. Many things can happen in response to a `GET` request,
            probably involving one or more redirects.

        '302':
          description: |
            If the resource owner denies the access request or if the request
            fails for reasons other than a missing or invalid redirection URI,
            the authorization server informs the client by adding the following
            parameters to the fragment component of the redirection URI using the
            `application/x-www-form-urlencoded` format […]

            - `error`

              REQUIRED.  A single ASCII error code from the following:

              - `invalid_request`

                The request is missing a required parameter, includes an
                invalid parameter value, includes a parameter more than
                once, or is otherwise malformed.

              - `unauthorized_client`

                The client is not authorized to request an access token
                using this method.

              - `access_denied`

                The resource owner or authorization server denied the
                request.

              - `unsupported_response_type`

                The authorization server does not support obtaining an
                access token using this method.

              - `invalid_scope`

                The requested scope is invalid, unknown, or malformed.

              - `server_error`

                The authorization server encountered an unexpected
                condition that prevented it from fulfilling the request.
                (This error code is needed because a 500 Internal Server
                Error HTTP status code cannot be returned to the client
                via an HTTP redirect.)

              - `temporarily_unavailable`

                The authorization server is currently unable to handle
                the request due to a temporary overloading or maintenance
                of the server.  (This error code is needed because a 503
                Service Unavailable HTTP status code cannot be returned
                to the client via an HTTP redirect.)

              Values for the `error` parameter MUST NOT include characters
              outside the set `%x20-21 / %x23-5B / %x5D-7E`.

            - `error_description`

              OPTIONAL.  Human-readable ASCII text providing
              additional information, used to assist the client developer in
              understanding the error that occurred.
              Values for the `error_description` parameter MUST NOT include
              characters outside the set `%x20-21 / %x23-5B / %x5D-7E`.

            - `error_uri`

              OPTIONAL.  A URI identifying a human-readable web page with
              information about the error, used to provide the client
              developer with additional information about the error.
              Values for the `error_uri` parameter MUST conform to the
              URI-reference syntax and thus MUST NOT include characters
              outside the set `%x21 / %x23-5B / %x5D-7E`.

            - `state`

              REQUIRED if a `state` parameter was present in the client
              authorization request.  The exact value received from the
              client.

        '303':
          description: |
            If the resource owner grants the access request, the authorization
            server issues an authorization code and delivers it to the client by
            adding the following parameters to the query component of the
            redirection URI using the `application/x-www-form-urlencoded` format.

            - `code`

              REQUIRED.  The authorization code generated by the
              authorization server.  The authorization code MUST expire
              shortly after it is issued to mitigate the risk of leaks.  A
              maximum authorization code lifetime of 10 minutes is
              RECOMMENDED.  The client MUST NOT use the authorization code
              more than once.  If an authorization code is used more than
              once, the authorization server MUST deny the request and SHOULD
              revoke (when possible) all tokens previously issued based on
              that authorization code.  The authorization code is bound to
              the client identifier and redirection URI.

            - `state`

              REQUIRED if the "state" parameter was present in the client
              authorization request.  The exact value received from the
              client.


  /token:
    post:
      summary: Access Token Request
      # externalDocs:
      #   description: "RFC6749"
      #   url: "https://tools.ietf.org/html/rfc6749#section-4.1.1"
      description: |
        [4.1.3.  Access Token Request](https://tools.ietf.org/html/rfc6749#section-4.1.3)

        The client makes a request to the token endpoint by sending the
        following parameters using the `application/x-www-form-urlencoded`
        format per Appendix B with a character encoding of UTF-8 in the HTTP
        request entity-body:
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - $ref: '#/parameters/grant_type_formData'
        - $ref: '#/parameters/code_formData'
        - $ref: '#/parameters/redirect_uri_formData'
        - $ref: '#/parameters/client_id_formData'
      produces:
        - application/json
      responses:
        '200':
          $ref: '#/responses/access_token_success'
        '400':
          $ref: '#/responses/access_token_error'



x-description: |
  [4.1.  Authorization Code Grant](https://tools.ietf.org/html/rfc6749#section-4.1)

  The authorization code grant type is used to obtain both access
  tokens and refresh tokens and is optimized for confidential clients.
  Since this is a redirection-based flow, the client must be capable of
  interacting with the resource owner's user-agent (typically a web
  browser) and capable of receiving incoming requests (via redirection)
  from the authorization server.

      +----------+
      | Resource |
      |   Owner  |
      |          |
      +----------+
           ^
           |
          (B)
      +----|-----+          Client Identifier      +---------------+
      |         -+----(A)-- & Redirection URI ---->|               |
      |  User-   |                                 | Authorization |
      |  Agent  -+----(B)-- User authenticates --->|     Server    |
      |          |                                 |               |
      |         -+----(C)-- Authorization Code ---<|               |
      +-|----|---+                                 +---------------+
        |    |                                         ^      v
       (A)  (C)                                        |      |
        |    |                                         |      |
        ^    v                                         |      |
      +---------+                                      |      |
      |         |>---(D)-- Authorization Code ---------'      |
      |  Client |          & Redirection URI                  |
      |         |                                             |
      |         |<---(E)----- Access Token -------------------'
      +---------+       (w/ Optional Refresh Token)

  Note: The lines illustrating steps (A), (B), and (C) are broken into
  two parts as they pass through the user-agent.

                   Figure 3: Authorization Code Flow

  The flow illustrated in Figure 3 includes the following steps:

  A.  The client initiates the flow by directing the resource owner's
      user-agent to the authorization endpoint.  The client includes
      its client identifier, requested scope, local state, and a
      redirection URI to which the authorization server will send the
      user-agent back once access is granted (or denied).

  B.  The authorization server authenticates the resource owner (via
      the user-agent) and establishes whether the resource owner
      grants or denies the client's access request.

  C.  Assuming the resource owner grants access, the authorization
      server redirects the user-agent back to the client using the
      redirection URI provided earlier (in the request or during
      client registration).  The redirection URI includes an
      authorization code and any local state provided by the client
      earlier.

  D.  The client requests an access token from the authorization
      server's token endpoint by including the authorization code
      received in the previous step.  When making the request, the
      client authenticates with the authorization server.  The client
      includes the redirection URI used to obtain the authorization
      code for verification.

  E.  The authorization server authenticates the client, validates the
      authorization code, and ensures that the redirection URI
      received matches the URI used to redirect the client in
      step (C).  If valid, the authorization server responds back with
      an access token and, optionally, a refresh token.
